Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 ovirt-guest-agent (1.0.9-1.1) unstable; urgency=low
 .
   * Non-maintainer upload
   * Initial release (Closes: #99999999)
Author: Vinzenz Feenstra <evilisimo@redhat.com>
Bug-Debian: http://bugs.debian.org/99999999

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- ovirt-guest-agent-1.0.9.orig/configure.ac
+++ ovirt-guest-agent-1.0.9/configure.ac
@@ -41,6 +41,26 @@ AC_ARG_WITH(kdm,
                            [Whether or not to build the single sign on KDM extension, default=yes]),
             kdm=${withval}, kdm=$sso)
 AC_SUBST(kdm)
+
+AC_ARG_WITH(sudohelper,
+            AS_HELP_STRING([--with-sudohelper],
+                           [[Choose the elevation mechanism to be installed. Available options are usermode or sudo], default=usermode]),
+            sudohelper=${withval}, sudohelper=usermode)
+AC_SUBST(sudohelper)
+
+case $sudohelper in
+    usermode)
+        ;;
+    sudo)
+        ;;
+    *)
+        AC_MSG_ERROR([sudohelper must be one of usermode or sudo])
+        ;;
+esac
+
+AM_CONDITIONAL(INSTALL_USERMODE_SCRIPTS, [test -n "$sudohelper" -a "$sudohelper" == "usermode"])
+AM_CONDITIONAL(INSTALL_SUDO_SCRIPTS, [test -n "$sudohelper" -a "$sudohelper" == "sudo"])
+
 AM_CONDITIONAL(BUILD_GDM_MODULE, [test -n "$gdm" -a "x$gdm" != xno ])
 AM_CONDITIONAL(BUILD_KDM_MODULE, [test -n "$kdm" -a "x$kdm" != xno ])
 AM_CONDITIONAL(BUILD_SSO_MODULES, [test -n "$sso" -a "x$sso" != xno ])
@@ -213,6 +233,8 @@ AC_CONFIG_FILES([
     ovirt-guest-agent/ovirt-guest-agent
     ovirt-guest-agent/consoleapps/Makefile
     ovirt-guest-agent/pam/Makefile
+    scripts/Makefile
+    scripts/wrappers/Makefile
     tests/Makefile
     windows-credprov/Makefile
 ])
--- ovirt-guest-agent-1.0.9.orig/Makefile.am
+++ ovirt-guest-agent-1.0.9/Makefile.am
@@ -5,6 +5,7 @@ SUBDIRS =                \
     GinaSSO              \
     tests                \
     windows-credprov     \
+    scripts              \
     $(NULL)
 
 if BUILD_SSO_MODULES
@@ -75,7 +76,4 @@ endif
 
 install-exec-hook:
 	$(MKDIR_P) $(DESTDIR)/$(pkgdatadir)
-	$(LN_S) -f $(bindir)/consolehelper $(DESTDIR)/$(pkgdatadir)/ovirt-locksession
-	$(LN_S) -f $(bindir)/consolehelper $(DESTDIR)/$(pkgdatadir)/ovirt-shutdown
-	$(LN_S) -f $(bindir)/consolehelper $(DESTDIR)/$(pkgdatadir)/ovirt-hibernate
 	$(INSTALL) -d $(DESTDIR)/$(localstatedir)/log/ovirt-guest-agent
--- /dev/null
+++ ovirt-guest-agent-1.0.9/scripts/Makefile.am
@@ -0,0 +1,13 @@
+SUBDIRS =    \
+    wrappers \
+    $(NULL)
+
+EXTRA_DIST=                    \
+    sudoers.ovirt-guest-agent  \
+    $(NULL)
+
+if INSTALL_SUDO_SCRIPTS
+install-data-hook:
+	$(MKDIR_P) $(DESTDIR)/$(sysconfdir)/sudoers.d
+	$(INSTALL) -m 440 sudoers.ovirt-guest-agent $(DESTDIR)/$(sysconfdir)/sudoers.d/50_ovirt-guest-agent
+endif
--- /dev/null
+++ ovirt-guest-agent-1.0.9/scripts/sudoers.ovirt-guest-agent
@@ -0,0 +1,8 @@
+Cmnd_Alias OVIRTAGENT_SCRIPTS =\
+    /usr/share/ovirt-guest-agent/ovirt-hibernate-wrapper.sh *,\
+    /usr/share/ovirt-guest-agent/ovirt-shutdown-wrappers.h *,\
+    /usr/share/ovirt-guest-agent/ovirt-locksession-wrapper.sh
+
+ovirtagent ALL= NOPASSWD: OVIRTAGENT_SCRIPTS
+Defaults:ovirtagent !requiretty
+Defaults:ovirtagent !syslog
--- /dev/null
+++ ovirt-guest-agent-1.0.9/scripts/wrappers/ovirt-locksession-wrapper.sh
@@ -0,0 +1,22 @@
+#!/bin/sh
+#
+#       Copyright (C) 2014 Vinzenz Feenstra, Red Hat, Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#   http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+# Refer to the README and COPYING files for full details of the license.
+#
+
+/usr/share/ovirt-guest-agent/LockActiveSession.py $@ &> /dev/null
+
+
--- /dev/null
+++ ovirt-guest-agent-1.0.9/scripts/wrappers/ovirt-shutdown-wrapper.sh
@@ -0,0 +1,22 @@
+#!/bin/sh
+#
+#       Copyright (C) 2014 Vinzenz Feenstra, Red Hat, Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#   http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+# Refer to the README and COPYING files for full details of the license.
+#
+
+/sbin/shutdown $@
+
+
--- /dev/null
+++ ovirt-guest-agent-1.0.9/scripts/wrappers/ovirt-sudo-wrapper.sh
@@ -0,0 +1,22 @@
+#!/bin/sh
+#
+#       Copyright (C) 2014 Vinzenz Feenstra, Red Hat, Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#   http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+# Refer to the README and COPYING files for full details of the license.
+#
+
+sudo "/usr/share/ovirt-guest-agent/`basename $0`-wrapper.sh" $@
+
+
--- /dev/null
+++ ovirt-guest-agent-1.0.9/scripts/wrappers/Makefile.am
@@ -0,0 +1,32 @@
+
+EXTRA_DIST =                         \
+    ovirt-hibernate-wrapper.sh       \
+    ovirt-locksession-wrapper.sh     \
+    ovirt-shutdown-wrapper.sh        \
+    ovirt-sudo-wrapper.sh            \
+    $(NULL)
+
+CLEANFILES = \
+    *~
+
+if INSTALL_SUDO_SCRIPTS
+sudoscriptsdir = $(pkgdatadir)
+sudoscripts_SCRIPTS=                \
+    ovirt-sudo-wrapper.sh           \
+    ovirt-hibernate-wrapper.sh      \
+    ovirt-shutdown-wrapper.sh       \
+    ovirt-locksession-wrapper.sh    \
+    $(NULL)
+
+install-exec-hook:
+	$(LN_S) -f $(pkgdatadir)/ovirt-sudo-wrapper.sh $(DESTDIR)/$(pkgdatadir)/ovirt-hibernate
+	$(LN_S) -f $(pkgdatadir)/ovirt-sudo-wrapper.sh $(DESTDIR)/$(pkgdatadir)/ovirt-locksession
+	$(LN_S) -f $(pkgdatadir)/ovirt-sudo-wrapper.sh $(DESTDIR)/$(pkgdatadir)/ovirt-shutdown
+endif
+
+if INSTALL_USERMODE_SCRIPTS
+install-exec-hook:
+	$(LN_S) -f $(bindir)/consolehelper $(DESTDIR)/$(pkgdatadir)/ovirt-locksession
+	$(LN_S) -f $(bindir)/consolehelper $(DESTDIR)/$(pkgdatadir)/ovirt-shutdown
+	$(LN_S) -f $(bindir)/consolehelper $(DESTDIR)/$(pkgdatadir)/ovirt-hibernate
+endif
--- /dev/null
+++ ovirt-guest-agent-1.0.9/scripts/wrappers/ovirt-hibernate-wrapper.sh
@@ -0,0 +1,22 @@
+#!/bin/sh
+#
+#       Copyright (C) 2014 Vinzenz Feenstra, Red Hat, Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#   http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+# Refer to the README and COPYING files for full details of the license.
+#
+
+/usr/share/ovirt-guest-agent/hibernate $@
+
+
--- ovirt-guest-agent-1.0.9.orig/m4/fhs.m4
+++ ovirt-guest-agent-1.0.9/m4/fhs.m4
@@ -18,6 +18,26 @@ AC_DEFUN([DEFINE_FHS_REDHAT],[
         AC_SUBST([udevdir],        ['${sysconfdir}/udev'])
 ])
 
+AC_DEFUN([DEFINE_FHS_SUSE],[
+        AC_SUBST([exec_prefix],    ['${prefix}'])
+        AC_SUBST([bindir],         ['${exec_prefix}/bin'])
+        AC_SUBST([sbindir],        ['${exec_prefix}/sbin'])
+        AC_SUBST([libexecdir],     ['${exec_prefix}/libexec'])
+        AC_SUBST([datarootdir],    ['${prefix}/share'])
+        AC_SUBST([datadir],        ['${datarootdir}'])
+        AC_SUBST([sysconfdir],     ['/etc'])
+        AC_SUBST([localstatedir],  ['/var'])
+        AC_SUBST([sharedstatedir], ['/var/lib'])
+        AC_SUBST([includedir],     ['${prefix}/include'])
+        AC_SUBST([oldincludedir],  ['/usr/include'])
+        AC_SUBST([libdir],         ['${exec_prefix}/lib'])
+        AC_SUBST([localedir],      ['${datarootdir}/locale'])
+        AC_SUBST([mandir],         ['/usr/share/man'])
+        AC_SUBST([infodir],        ['/usr/share/info'])
+        AC_SUBST([rundir],         ['${sharedstatedir}/run'])
+        AC_SUBST([udevdir],        ['/lib/udev'])
+])
+
 AC_DEFUN([DEFINE_FHS_DEBIAN],[
         AC_SUBST([exec_prefix],    ['${prefix}'])
         AC_SUBST([bindir],         ['${exec_prefix}/bin'])
@@ -42,6 +62,8 @@ AC_DEFUN([DEFINE_FHS_DEBIAN],[
 AC_DEFUN([DEFINE_FHS],[
     if test -f /etc/redhat-release; then
         DEFINE_FHS_REDHAT
+    elif test -f /etc/SuSE-release; then
+        DEFINE_FHS_SUSE
     elif test -f /etc/debian_version; then
         DEFINE_FHS_DEBIAN
     fi
@@ -50,6 +72,9 @@ AC_DEFUN([DEFINE_FHS],[
                                     ['${docdir}/${PACKAGE_TARNAME}'],
                                      ['${docdir}/${PACKAGE}'])])
 
+    if test "x${udevdir}" == "x"; then
+        AC_SUBST([udevdir], ['${sysconfdir}/udev'])
+    fi
     AC_SUBST([udevrulesdir], ['${udevdir}/rules.d'])
     AC_SUBST([pkgdatadir], ['${datadir}/${PACKAGE}'])
     AC_SUBST([pkgdaemonpidpath], ['${rundir}/${PACKAGE}.pid'])
--- /dev/null
+++ ovirt-guest-agent-1.0.9/tests/testrunner.py
@@ -0,0 +1,68 @@
+#! /usr/bin/env python
+# -*- coding: utf-8 -*-
+
+import logging
+import os
+import sys
+import unittest
+
+from nose import config
+from nose import core
+from nose import result
+
+from VirtIoChannel import VirtIoStream
+
+
+class GuestAgentTestCase(unittest.TestCase):
+    def __init__(self, *args, **kwargs):
+        unittest.TestCase.__init__(self, *args, **kwargs)
+        self.log = logging.getLogger(self.__class__.__name__)
+
+    def assertRaises(self, exceptions, callable, *args, **kwargs):
+            passed = False
+            try:
+                callable(*args, **kwargs)
+            except exceptions:
+                passed = True
+            self.assertTrue(passed)
+
+
+class GuestAgentTestRunner(core.TextTestRunner):
+    def __init__(self, *args, **kwargs):
+        core.TextTestRunner.__init__(self, *args, **kwargs)
+
+    def _makeResult(self):
+        return result.TextTestResult(self.stream,
+                                     self.descriptions,
+                                     self.verbosity,
+                                     self.config)
+
+    def run(self, test):
+        result_ = core.TextTestRunner.run(self, test)
+        return result_
+
+
+def run():
+    argv = sys.argv
+    stream = sys.stdout
+    verbosity = 3
+    testdir = os.path.dirname(os.path.abspath(__file__))
+
+    conf = config.Config(stream=stream,
+                         env=os.environ,
+                         verbosity=verbosity,
+                         workingDir=testdir,
+                         plugins=core.DefaultPluginManager())
+
+    runner = GuestAgentTestRunner(stream=conf.stream,
+                                  verbosity=conf.verbosity,
+                                  config=conf)
+
+    sys.exit(not core.run(config=conf, testRunner=runner, argv=argv))
+
+
+if __name__ == '__main__':
+    # We're ensuring VirtIoStream is monkey patched to unit test output mode
+    # which requires no VirtIO Channel to be present
+    VirtIoStream.is_test = True
+    run()
--- /dev/null
+++ ovirt-guest-agent-1.0.9/tests/encoding_test.py
@@ -0,0 +1,45 @@
+#! /usr/bin/env python
+# -*- coding: utf-8 -*-
+# vim:fenc=utf-8
+
+from testrunner import GuestAgentTestCase as TestCaseBase
+from VirtIoChannel import _filter_object
+
+
+class EncodingTest(TestCaseBase):
+
+    def testNonUnicodeKeyInput(self):
+        non_unicode_key = {'non-unicode-key': u'unicode value'}
+        self.assertEquals({u'non-unicode-key': u'unicode value'},
+                          _filter_object(non_unicode_key))
+
+    def testNonUnicodeValueInput(self):
+        non_unicode_value = {u'unicode-key': 'non-unicode value'}
+        self.assertEquals({u'unicode-key': u'non-unicode value'},
+                          _filter_object(non_unicode_value))
+
+    def testWindowsFailureOnValidValue(self):
+        VALID = u'\u0F65'
+        self.assertEquals(VALID, _filter_object(VALID))
+
+    def testNullChar(self):
+        non_unicode_value = {u'unicode-key': '\x00'}
+        self.assertEquals({u'unicode-key': u'\ufffd'},
+                          _filter_object(non_unicode_value))
+
+    def testIllegalUnicodeInput(self):
+        ILLEGAL_DATA = {u'foo': u'\x00data\x00test\uffff\ufffe\udc79\ud800'}
+        EXPECTED = {u'foo': u'\ufffddata\ufffdtest\ufffd\ufffd\ufffd\ufffd'}
+        self.assertEqual(EXPECTED, _filter_object(ILLEGAL_DATA))
+
+    def testIllegalUnicodeCharacters(self):
+        INVALID = (u'\u0000', u'\ufffe', u'\uffff', u'\ud800', u'\udc79',
+                   u'\U00000000', '\x00', '\x01', '\x02', '\x03', '\x04',
+                   '\x05')
+        for invchar in INVALID:
+            self.assertEqual(u'\ufffd', _filter_object(invchar))
+
+    def testLegalUnicodeCharacters(self):
+        LEGAL = (u'\u2122', u'Hello World')
+        for legalchar in LEGAL:
+            self.assertEqual(legalchar, _filter_object(legalchar))
--- /dev/null
+++ ovirt-guest-agent-1.0.9/tests/message_validator.py
@@ -0,0 +1,290 @@
+#! /usr/bin/env python
+# -*- coding: utf-8 -*-
+# vim:fenc=utf-8
+
+import test_port
+import json
+import logging
+import OVirtAgentLogic
+
+
+class TestPortWriteBuffer(test_port.TestPort):
+    def __init__(self, vport_name, *args, **kwargs):
+        test_port.TestPort.__init__(self, vport_name, *args, **kwargs)
+        self._buffer = ''
+
+    def write(self, buffer):
+        self._buffer = self._buffer + buffer
+        return len(buffer)
+
+    def read(self, size):
+        return ''
+
+    def clear(self):
+        self._buffer = ''
+
+
+def _ensure_no_messages(f):
+    def fun(self, *args, **kwargs):
+        result = f(self, *args, **kwargs)
+        parsed = self._get_messages()
+        assert(len(parsed) == 0)
+        return result
+    return fun
+
+
+def assertIn(m, n):
+    if not m in n:
+        raise Exception("%s not in %s" % (m, str(n)))
+
+
+def assertEqual(a, b, msg=None):
+    if a != b:
+        raise Exception(msg or '%s != %s' % (str(a), str(b)))
+
+
+def _ensure_messages(*messages):
+    def wrapped(f):
+        def fun(self, *args, **kwargs):
+            result = f(self, *args, **kwargs)
+            names = []
+            parsed = self._get_messages()
+            for m in parsed:
+                assertIn('__name__', m)
+                names.append(m['__name__'])
+                self._check(m)
+            for m in messages:
+                assertIn(m, names)
+            for n in names:
+                assertIn(n, messages)
+            return result
+        return fun
+    return wrapped
+
+
+def _name_only(n):
+    def wrapped(o):
+        assert(len(o) == 1)
+        assert(o['__name__'] == n)
+    return wrapped
+
+
+def assert_string_param(o, n):
+    assert(n in o)
+    assert(isinstance(o[n], basestring))
+
+
+def assert_integral_param(o, n):
+    assert(n in o)
+    integral = isinstance(o[n], (int, long))
+    if not integral and isinstance(o[n], basestring):
+        var = long(o[n])
+        integral = True
+    assert(integral)
+
+
+def _name_and_one_str_param(msg_name, param_name):
+    def wrapped(o):
+        assert(o['__name__'] == msg_name)
+        assert_string_param(o, param_name)
+    return wrapped
+
+
+def _name_and_one_integral_param(msg_name, param_name):
+    def wrapped(o):
+        assert(o['__name__'] == msg_name)
+        assert_integral_param(o, param_name)
+    return wrapped
+
+
+def assert_is_string_list(o):
+    assert(isinstance(o, list))
+    for s in o:
+        assert(isinstance(s, basestring))
+
+
+def _name_and_one_string_list_param(msg_name, param_name):
+    def wrapped(o):
+        assert(o['__name__'] == msg_name)
+        assert(param_name in o)
+        assert_is_string_list(o[param_name])
+    return wrapped
+
+
+def validate_network_interfaces(msg):
+    assert(msg['__name__'] == 'network-interfaces')
+    assert('interfaces' in msg)
+    assert(isinstance(msg['interfaces'], list))
+    for obj in msg['interfaces']:
+        assert_string_param(obj, 'hw')
+        assert_string_param(obj, 'name')
+        assert('inet' in obj)
+        assert_is_string_list(obj['inet'])
+        assert('inet6' in obj)
+        assert_is_string_list(obj['inet6'])
+
+
+def validate_disks_usage(msg):
+    for disk in msg['disks']:
+        assert_string_param(disk, 'fs')
+        assert_string_param(disk, 'path')
+        assert('total' in disk)
+        assert_integral_param(disk, 'total')
+        assert('used' in disk)
+        assert_integral_param(disk, 'used')
+
+
+def validate_memory_stats(msg):
+    assert('memory' in msg)
+    mem = msg['memory']
+    assert_integral_param(mem, 'majflt')
+    assert_integral_param(mem, 'mem_free')
+    assert_integral_param(mem, 'mem_total')
+    assert_integral_param(mem, 'mem_unused')
+    assert_integral_param(mem, 'mem_buffers')
+    assert_integral_param(mem, 'mem_cached')
+    assert_integral_param(mem, 'pageflt')
+    assert_integral_param(mem, 'swap_in')
+    assert_integral_param(mem, 'swap_out')
+
+
+_MSG_VALIDATORS = {
+    'active-user': _name_and_one_str_param('active-user', 'name'),
+    'applications': _name_and_one_string_list_param('applications',
+                                                    'applications'),
+    'disks-usage': validate_disks_usage,
+    'fqdn': _name_and_one_str_param('fqdn', 'fqdn'),
+    'host-name': _name_and_one_str_param('host-name', 'name'),
+    'memory-stats': validate_memory_stats,
+    'network-interfaces': validate_network_interfaces,
+    'number-of-cpus': _name_and_one_integral_param('number-of-cpus', 'count'),
+    'os-version': _name_and_one_str_param('os-version', 'version'),
+    'session-lock': _name_only('session-lock'),
+    'session-logoff': _name_only('session-logoff'),
+    'session-logon': _name_only('session-logon'),
+    'session-shutdown': _name_only('session-shutdown'),
+    'session-startup': _name_only('session-startup'),
+    'session-unlock': _name_only('session-unlock'),
+    'api-version': _name_and_one_integral_param('api-version', 'apiVersion')
+}
+
+
+def _check_fun(msg):
+    logging.debug("Message: %s", str(msg))
+    assert(msg['__name__'] in _MSG_VALIDATORS)
+    _MSG_VALIDATORS[msg['__name__']](msg)
+
+
+class MessageValidator(object):
+    def __init__(self, vport_name):
+        self._port = TestPortWriteBuffer(vport_name)
+
+    def port(self):
+        return self._port
+
+    def _get_messages(self):
+        result = []
+        for line in self._port._buffer.split('\n'):
+            line = line.strip()
+            if line:
+                result.append(json.loads(line))
+        return result
+
+    def _check(self, msg):
+        _check_fun(msg)
+
+    @_ensure_messages('host-name', 'os-version', 'network-interfaces')
+    def verifySendInfo(self, agent):
+        agent.sendInfo()
+
+    @_ensure_messages('applications')
+    def verifySendAppList(self, agent):
+        agent.sendAppList()
+
+    @_ensure_messages('disks-usage')
+    def verifySendDisksUsages(self, agent):
+        agent.sendDisksUsages()
+
+    @_ensure_messages('memory-stats')
+    def verifySendMemoryStats(self, agent):
+        agent.sendMemoryStats()
+
+    def verifySendNumberOfCPUs(self, agent):
+        self._verifySendNumberOfCPUsV0(agent)
+        self._verifySendNumberOfCPUsV1(agent)
+
+    @_ensure_messages()
+    def _verifySendNumberOfCPUsV0(self, agent):
+        agent.dr.apiVersion = 0
+        agent.sendNumberOfCPUs()
+
+    @_ensure_messages('number-of-cpus')
+    def _verifySendNumberOfCPUsV1(self, agent):
+        agent.dr.apiVersion = 1
+        agent.sendNumberOfCPUs()
+        agent.dr.apiVersion = 0
+
+    @_ensure_messages('active-user')
+    def verifySendUserInfo(self, agent):
+        agent.sendUserInfo()
+
+    @_ensure_messages('fqdn')
+    def verifySendFQDN(self, agent):
+        agent.sendFQDN()
+
+    @_ensure_messages('active-user', 'session-logon')
+    def verifySessionLogon(self, agent):
+        agent.sessionLogon()
+
+    @_ensure_messages('active-user', 'session-logoff')
+    def verifySessionLogoff(self, agent):
+        agent.sessionLogoff()
+
+    @_ensure_messages('session-lock')
+    def verifySessionLock(self, agent):
+        agent.sessionLock()
+
+    @_ensure_messages('session-unlock')
+    def verifySessionUnlock(self, agent):
+        agent.sessionUnlock()
+
+    @_ensure_messages('session-startup')
+    def verifySessionStartup(self, agent):
+        agent.sessionStartup()
+
+    @_ensure_messages('session-shutdown')
+    def verifySessionShutdown(self, agent):
+        agent.sessionShutdown()
+
+    def verifyAPIVersion(self, agent):
+        # If not yet activated, monkey patch to support the versioning
+        if OVirtAgentLogic._MAX_SUPPORTED_API_VERSION == 0:
+            OVirtAgentLogic._MAX_SUPPORTED_API_VERSION = 1
+        # Pretend VDSM told us it would support a higher version
+        useVersion = OVirtAgentLogic._MAX_SUPPORTED_API_VERSION + 1
+        agent._onApiVersion({'apiVersion': useVersion})
+
+    def verifyAPIVersion2(self, agent):
+        if OVirtAgentLogic._MAX_SUPPORTED_API_VERSION == 0:
+            OVirtAgentLogic._MAX_SUPPORTED_API_VERSION = 1
+        # Pretend VDSM told us nothing or 0
+        agent.dr.setAPIVersion(0)
+
+    @_ensure_messages('applications', 'host-name', 'os-version', 'active-user',
+                      'network-interfaces', 'disks-usage', 'fqdn')
+    def verifyRefreshReply(self, agent):
+        # If not yet activated, monkey patch to support the versioning
+        if OVirtAgentLogic._MAX_SUPPORTED_API_VERSION == 0:
+            OVirtAgentLogic._MAX_SUPPORTED_API_VERSION = 1
+        agent.dr.setAPIVersion(1)
+        assert(agent.dr.getAPIVersion() == 1)
+        agent.parseCommand('refresh', {'apiVersion': 1})
+        assert(agent.dr.getAPIVersion() == 1)
+
+    @_ensure_messages('applications', 'host-name', 'os-version', 'active-user',
+                      'network-interfaces', 'disks-usage', 'fqdn')
+    def verifyRefreshReply2(self, agent):
+        agent.dr.setAPIVersion(1)
+        assert(agent.dr.getAPIVersion() == 1)
+        agent.parseCommand('refresh', {})
+        assert(agent.dr.getAPIVersion() == 0)
--- /dev/null
+++ ovirt-guest-agent-1.0.9/tests/unittest.bat
@@ -0,0 +1,5 @@
+@echo off
+REM Run unittests for Windows
+
+set PYTHONPATH=%PYTHONPATH%;../ovirt-guest-agent;.;
+python testrunner.py guest_agent_test.py encoding_test.py
--- ovirt-guest-agent-1.0.9.orig/tests/Makefile.am
+++ ovirt-guest-agent-1.0.9/tests/Makefile.am
@@ -7,3 +7,12 @@ TESTS=\
     guest_agent_test.py \
     $(NULL)
 
+EXTRA_DIST=                 \
+    encoding_test.py        \
+    guest_agent_test.py     \
+    message_validator.py    \
+    test_port.py            \
+    testrunner.py           \
+    unittest.bat            \
+    $(NULL)
+
--- /dev/null
+++ ovirt-guest-agent-1.0.9/tests/test_port.py
@@ -0,0 +1,26 @@
+#! /usr/bin/env python
+# -*- coding: utf-8 -*-
+# vim:fenc=utf-8
+
+
+class TestPort(object):
+    def __init__(self, vport_name, *args, **kwargs):
+        self._vport_name = vport_name
+
+    def write(buffer):
+        return len(buffer)
+
+    def read(size):
+        return ""
+
+
+_registered_ports = {}
+
+
+def get_test_port(vport_name):
+    return _registered_ports.get(vport_name, TestPort(vport_name))
+
+
+def add_test_port(vport_name, port):
+    assert(isinstance(port, TestPort))
+    _registered_ports[vport_name] = port
--- /dev/null
+++ ovirt-guest-agent-1.0.9/tests/guest_agent_test.py
@@ -0,0 +1,107 @@
+#! /usr/bin/env python
+# -*- coding: utf-8 -*-
+# vim:fenc=utf-8
+
+
+from ConfigParser import ConfigParser
+import platform
+
+from message_validator import MessageValidator
+from testrunner import GuestAgentTestCase
+
+import test_port
+
+
+def _linux_setup_test(conf):
+    port_name = 'linux-functional-test-port'
+    conf.set('general', 'applications_list',
+             'kernel ovirt-guest-agent xorg-x11-drv-qxl '
+             'linux-image xserver-xorg-video-qxl')
+    conf.set('general', 'ignored_fs',
+             'rootfs tmpfs autofs cgroup selinuxfs udev mqueue '
+             'nfds proc sysfs devtmpfs hugetlbfs rpc_pipefs devpts '
+             'securityfs debugfs binfmt_misc fuse.gvfsd-fuse '
+             'fuse.gvfs-fuse-daemon fusectl usbfs')
+    from GuestAgentLinux2 import LinuxVdsAgent
+    return port_name, LinuxVdsAgent
+
+
+def _win32_setup_test(conf):
+    port_name = "windows-functional-test-port"
+    from GuestAgentWin32 import WinVdsAgent
+    return port_name, WinVdsAgent
+
+
+class FunctionalTest(GuestAgentTestCase):
+    def setUp(self):
+        self._config = ConfigParser()
+        self._config.add_section('general')
+        self._config.add_section('virtio')
+
+        agent_class = None
+        if platform.system() in ['Windows', 'Microsoft']:
+            self._vport_name, agent_class = _win32_setup_test(self._config)
+        else:
+            self._vport_name, agent_class = _linux_setup_test(self._config)
+
+        self._validator = MessageValidator(self._vport_name)
+        self._vport = self._validator.port()
+        test_port.add_test_port(self._vport_name, self._vport)
+
+        self._config.set('general', 'heart_beat_rate', '5')
+        self._config.set('general', 'report_user_rate', '10')
+        self._config.set('general', 'report_num_cpu_rate', '60')
+        self._config.set('general', 'report_application_rate', '120')
+        self._config.set('general', 'report_disk_usage', '300')
+        self._config.set('virtio', 'device', self._vport_name)
+
+        self.vdsAgent = agent_class(self._config)
+
+    def testRefresh(self):
+        self._validator.verifyRefreshReply(self.vdsAgent)
+        self._validator.verifyRefreshReply2(self.vdsAgent)
+
+    def testSendInfo(self):
+        self._validator.verifySendInfo(self.vdsAgent)
+
+    def testSendAppList(self):
+        self._validator.verifySendAppList(self.vdsAgent)
+
+    def testSendDisksUsages(self):
+        self._validator.verifySendDisksUsages(self.vdsAgent)
+
+    def testSendMemoryStats(self):
+        self._validator.verifySendMemoryStats(self.vdsAgent)
+
+    def testSendFQDN(self):
+        self._validator.verifySendFQDN(self.vdsAgent)
+
+    def testSendUserInfo(self):
+        self._validator.verifySendUserInfo(self.vdsAgent)
+
+    def testSendNumberOfCPUs(self):
+        self._validator.verifySendNumberOfCPUs(self.vdsAgent)
+
+    def testSessionLogon(self):
+        self._validator.verifySessionLogon(self.vdsAgent)
+
+    def testSessionLogoff(self):
+        self._validator.verifySessionLogon(self.vdsAgent)
+
+    def testSessionLock(self):
+        self._validator.verifySessionLock(self.vdsAgent)
+
+    def testSessionUnlock(self):
+        self._validator.verifySessionUnlock(self.vdsAgent)
+
+    def testSessionStartup(self):
+        self._validator.verifySessionStartup(self.vdsAgent)
+
+    def testSessionShutdown(self):
+        self._validator.verifySessionShutdown(self.vdsAgent)
+
+    def testAPIVersion(self):
+        self._validator.verifyAPIVersion(self.vdsAgent)
+
+    def testAPIVersion2(self):
+        self._validator.verifyAPIVersion2(self.vdsAgent)
--- ovirt-guest-agent-1.0.9.orig/ovirt-guest-agent/OVirtAgentLogic.py
+++ ovirt-guest-agent-1.0.9/ovirt-guest-agent/OVirtAgentLogic.py
@@ -21,9 +21,42 @@ import time
 import logging
 import struct
 import socket
+
+multiproc = None
+try:
+    import multiprocessing
+    multiproc = multiprocessing
+except ImportError:
+    class MultiProcessingFake:
+        def cpu_count(self):
+            return -1
+    multiproc = MultiProcessingFake()
+
 from threading import Event
 from VirtIoChannel import VirtIoChannel
 
+_MAX_SUPPORTED_API_VERSION = 1
+_DISABLED_API_VALUE = 0
+
+_MESSAGE_MIN_API_VERSION = {
+    'active-user': 0,
+    'applications': 0,
+    'disks-usage': 0,
+    'echo': 0,
+    'fqdn': 0,
+    'heartbeat': 0,
+    'host-name': 0,
+    'memory-stats': 0,
+    'network-interfaces': 0,
+    'number-of-cpus': 1,
+    'os-version': 0,
+    'session-lock': 0,
+    'session-logoff': 0,
+    'session-logon': 0,
+    'session-shutdown': 0,
+    'session-startup': 0,
+    'session-unlock': 0}
+
 
 # Return a safe (password masked) repr of the credentials block.
 def safe_creds_repr(creds):
@@ -36,6 +69,7 @@ def safe_creds_repr(creds):
 
 class DataRetriverBase:
     def __init__(self):
+        self.apiVersion = _DISABLED_API_VALUE
         self.memStats = {
             'mem_total': 0,
             'mem_free': 0,
@@ -45,6 +79,39 @@ class DataRetriverBase:
             'pageflt': 0,
             'majflt': 0}
 
+    def onAPIVersionUpdated(self, oldVersion, newVersion):
+        pass
+
+    def getAPIVersion(self):
+        return self.apiVersion
+
+    def setAPIVersion(self, version):
+        oldVersion = self.apiVersion
+        try:
+            version = int(version)
+        except ValueError:
+            logging.info("Invalid api version value '%s' set. Version value "
+                         "not changed.", version)
+            return
+
+        if _MAX_SUPPORTED_API_VERSION < version:
+            logging.debug("API version requested (%d) higher than known (%d). "
+                          "Using max known version.", version,
+                          _MAX_SUPPORTED_API_VERSION)
+            version = _MAX_SUPPORTED_API_VERSION
+
+        if version == self.apiVersion:
+            logging.debug("API version %d already set, no update necessary",
+                          version)
+            return
+        self.apiVersion = version
+
+        logging.info("API Version updated from %d to %d", oldVersion, version)
+        try:
+            self.onAPIVersionUpdated(oldVersion, version)
+        except Exception:
+            logging.exception("onAPIVersionUpdated failed")
+
     def getMachineName(self):
         pass
 
@@ -75,6 +142,16 @@ class DataRetriverBase:
     def getFQDN(self):
         return socket.getfqdn()
 
+    def getNumberOfCPUs(self):
+        """
+        Reports the number of CPUs or -1 if this was not implemented for the
+        current OS/Platform
+        """
+        try:
+            return multiproc.cpu_count()
+        except NotImplementedError:
+            return -1
+
 
 class AgentLogicBase:
 
@@ -86,11 +163,22 @@ class AgentLogicBase:
         self.appRefreshRate = config.getint("general",
                                             "report_application_rate")
         self.disksRefreshRate = config.getint("general", "report_disk_usage")
+        self.numCPUsCheckRate = config.getint("general", "report_num_cpu_rate")
         self.activeUser = ""
         self.vio = VirtIoChannel(config.get("virtio", "device"))
         self.dr = None
         self.commandHandler = None
 
+    def _send(self, name, arguments=None):
+        version = _MESSAGE_MIN_API_VERSION.get(name, None)
+        if version is None:
+            logging.error('Undocumented message "%s"', name)
+        elif version <= self.dr.getAPIVersion():
+            self.vio.write(name, arguments or {})
+        else:
+            logging.debug("Message %s not supported by api version %d.",
+                          name, self.dr.getAPIVersion())
+
     def run(self):
         logging.debug("AgentLogicBase:: run() entered")
         thread.start_new_thread(self.doListen, ())
@@ -119,15 +207,17 @@ class AgentLogicBase:
         appsecs = self.appRefreshRate
         disksecs = self.disksRefreshRate
         usersecs = self.userCheckRate
+        numcpusecs = self.numCPUsCheckRate
 
         try:
             while not self.wait_stop.isSet():
                 counter += 1
                 hbsecs -= 1
                 if hbsecs <= 0:
-                    self.vio.write('heartbeat',
-                                   {'free-ram': self.dr.getAvailableRAM(),
-                                    'memory-stat': self.dr.getMemoryStats()})
+                    self._send('heartbeat',
+                               {'free-ram': self.dr.getAvailableRAM(),
+                                'memory-stat': self.dr.getMemoryStats(),
+                                'apiVersion': _MAX_SUPPORTED_API_VERSION})
                     hbsecs = self.heartBitRate
                 usersecs -= 1
                 if usersecs <= 0:
@@ -142,6 +232,10 @@ class AgentLogicBase:
                 if disksecs <= 0:
                     self.sendDisksUsages()
                     disksecs = self.disksRefreshRate
+                numcpusecs -= 1
+                if numcpusecs <= 0:
+                    self.sendNumberOfCPUs()
+                    numcpusecs = self.numCPUsCheckRate
                 time.sleep(1)
             logging.debug("AgentLogicBase:: doWork() exiting")
         except:
@@ -165,12 +259,17 @@ class AgentLogicBase:
                                   'channel.')
         logging.debug("AgentLogicBase::doListen() - exiting")
 
+    def _onApiVersion(self, args):
+        self.dr.setAPIVersion(args['apiVersion'])
+
     def parseCommand(self, command, args):
         logging.info("Received an external command: %s..." % (command))
         if command == 'lock-screen':
             self.commandHandler.lock_screen()
         elif command == 'log-off':
             self.commandHandler.logoff()
+        elif command == 'api-version':
+            self._onApiVersion(args)
         elif command == 'shutdown':
             try:
                 timeout = int(args['timeout'])
@@ -201,6 +300,10 @@ class AgentLogicBase:
                           % (safe_creds_repr(credentials)))
             self.commandHandler.login(credentials)
         elif command == 'refresh':
+            if not 'apiVersion' in args and self.dr.getAPIVersion() > 0:
+                logging.info('API versioning not supported by VDSM. Disabling '
+                             'versioning support.')
+                self.dr.setAPIVersion(_DISABLED_API_VALUE)
             self.sendUserInfo(True)
             self.sendAppList()
             self.sendInfo()
@@ -208,40 +311,47 @@ class AgentLogicBase:
             self.sendFQDN()
         elif command == 'echo':
             logging.debug("Echo: %s", args)
-            self.vio.write('echo', args)
+            self._send('echo', args)
         elif command == 'hibernate':
             state = args.get('state', 'disk')
             self.commandHandler.hibernate(state)
+        elif command == 'set-number-of-cpus':
+            count = args.get('count', 0)
+            if count > 0:
+                self.commandHandler.set_number_of_cpus(count)
+                self.sendNumberOfCPUs()
         else:
             logging.error("Unknown external command: %s (%s)"
                           % (command, args))
 
     def sendFQDN(self):
-        self.vio.write('fqdn', {'fqdn': self.dr.getFQDN()})
+        self._send('fqdn', {'fqdn': self.dr.getFQDN()})
 
     def sendUserInfo(self, force=False):
         cur_user = str(self.dr.getActiveUser())
         logging.debug("AgentLogicBase::sendUserInfo - cur_user = '%s'" %
                       (cur_user))
         if cur_user != self.activeUser or force:
-            self.vio.write('active-user', {'name': cur_user})
+            self._send('active-user', {'name': cur_user})
             self.activeUser = cur_user
 
     def sendInfo(self):
-        self.vio.write('host-name', {'name': self.dr.getMachineName()})
-        self.vio.write('os-version', {'version': self.dr.getOsVersion()})
-        self.vio.write('network-interfaces',
-                       {'interfaces': self.dr.getAllNetworkInterfaces()})
+        self._send('host-name', {'name': self.dr.getMachineName()})
+        self._send('os-version', {'version': self.dr.getOsVersion()})
+        self._send('network-interfaces',
+                   {'interfaces': self.dr.getAllNetworkInterfaces()})
 
     def sendAppList(self):
-        self.vio.write('applications',
-                       {'applications': self.dr.getApplications()})
+        self._send('applications', {'applications': self.dr.getApplications()})
 
     def sendDisksUsages(self):
-        self.vio.write('disks-usage', {'disks': self.dr.getDisksUsage()})
+        self._send('disks-usage', {'disks': self.dr.getDisksUsage()})
 
     def sendMemoryStats(self):
-        self.vio.write('memory-stats', {'memory': self.dr.getMemoryStats()})
+        self._send('memory-stats', {'memory': self.dr.getMemoryStats()})
+
+    def sendNumberOfCPUs(self):
+        self._send('number-of-cpus', {'count': self.dr.getNumberOfCPUs()})
 
     def sessionLogon(self):
         logging.debug("AgentLogicBase::sessionLogon: user logs on the system.")
@@ -252,29 +362,29 @@ class AgentLogicBase:
             cur_user = self.dr.getActiveUser()
             retries = retries + 1
         self.sendUserInfo()
-        self.vio.write('session-logon')
+        self._send('session-logon')
 
     def sessionLogoff(self):
         logging.debug("AgentLogicBase::sessionLogoff: "
                       "user logs off from the system.")
         self.activeUser = 'None'
-        self.vio.write('session-logoff')
-        self.vio.write('active-user', {'name': self.activeUser})
+        self._send('session-logoff')
+        self._send('active-user', {'name': self.activeUser})
 
     def sessionLock(self):
         logging.debug("AgentLogicBase::sessionLock: "
                       "user locks the workstation.")
-        self.vio.write('session-lock')
+        self._send('session-lock')
 
     def sessionUnlock(self):
         logging.debug("AgentLogicBase::sessionUnlock: "
                       "user unlocks the workstation.")
-        self.vio.write('session-unlock')
+        self._send('session-unlock')
 
     def sessionStartup(self):
         logging.debug("AgentLogicBase::sessionStartup: system starts up.")
-        self.vio.write('session-startup')
+        self._send('session-startup')
 
     def sessionShutdown(self):
         logging.debug("AgentLogicBase::sessionShutdown: system shuts down.")
-        self.vio.write('session-shutdown')
+        self._send('session-shutdown')
--- ovirt-guest-agent-1.0.9.orig/ovirt-guest-agent/LockActiveSession.py
+++ ovirt-guest-agent-1.0.9/ovirt-guest-agent/LockActiveSession.py
@@ -20,36 +20,87 @@ import logging
 import os
 
 
-def GetActiveSession():
+class SessionWrapper(object):
+    def __init__(self, session, bus, path):
+        self._bus = bus
+        self._path = path
+        self._session = session
+        self._props = GetInterface(bus, 'login1', '', path,
+                                   'org.freedesktop.DBus.Properties')
+
+    def _getProperty(self, name):
+        return self._props.Get('org.freedesktop.login1.Session', name)
+
+    def GetId(self):
+        return self._getProperty('Id')
+
+    def IsActive(self):
+        return self._getProperty('Active')
+
+    def GetX11Display(self):
+        return self._getProperty('Display')
+
+    def GetUnixUser(self):
+        return self._getProperty('User')[0]
+
+    def Lock(self):
+        return self._session.Lock()
+
+
+def GetInterface(bus, service, name, path, fname=None):
+    obj = bus.get_object('org.freedesktop.%s' % service, path)
+    iface = fname
+    if not iface:
+        iface = 'org.freedesktop.%s.%s' % (service, name)
+        if not name:
+            iface = iface[:-1]
+    return dbus.Interface(obj, dbus_interface=iface)
+
+
+def GetInterfaceByName(bus, service, name, isSub):
+    path = '/org/freedesktop/' + service
+    if isSub:
+        path += '/' + name
+    return GetInterface(bus, service, name, path)
+
+
+def GetSessions(manager):
+    try:
+        return manager.GetSessions()
+    except dbus.DBusException:
+        return [x[4] for x in manager.ListSessions()]
+
+
+def GetSession(bus, service, managerIsSub, wrapSession):
     session = None
     try:
-        bus = dbus.SystemBus()
-        manager = dbus.Interface(
-            bus.get_object(
-                'org.freedesktop.ConsoleKit',
-                '/org/freedesktop/ConsoleKit/Manager'),
-            dbus_interface='org.freedesktop.ConsoleKit.Manager')
-        sessions = manager.GetSessions()
-        for session_path in sessions:
-            s = dbus.Interface(
-                bus.get_object(
-                    'org.freedesktop.ConsoleKit', session_path),
-                dbus_interface='org.freedesktop.ConsoleKit.Session')
+        manager = GetInterfaceByName(bus, service, 'Manager', managerIsSub)
+        for session_path in GetSessions(manager):
+            s = GetInterface(bus, service, 'Session', session_path)
+            s = wrapSession(s, bus, session_path)
             if s.IsActive():
                 session = s
-    except:
-        logging.exception("Error retrieving active session (ignore if running "
-                          "on a system without ConsoleKit installed).")
+                break
+    except dbus.DBusException:
+        logging.exception("%s seems not to be available", service)
+    return session
+
+
+def GetActiveSession():
+    bus = dbus.SystemBus()
+    ARGS = (('ConsoleKit', True, lambda *a: a[0]),
+            ('login1', False, SessionWrapper))
+    for args in ARGS:
+        session = GetSession(bus, *args)
+        if session:
+            break
     return session
 
 
 def GetScreenSaver():
     try:
         bus = dbus.SessionBus()
-        screensaver = dbus.Interface(
-            bus.get_object(
-                'org.freedesktop.ScreenSaver', '/ScreenSaver'),
-            dbus_interface='org.freedesktop.ScreenSaver')
+        screensaver = GetInterface(bus, 'ScreenSaver', '', '/ScreenSaver')
     except dbus.DBusException:
         logging.exception("Error retrieving ScreenSaver interface (ignore if "
                           "running on GNOME).")
@@ -70,6 +121,7 @@ def LockSession(session):
             screensaver.Lock()
             exitcode = 0
         else:
+            logging.info("KDE standard interface seems not to be supported")
             exitcode = 1
         os._exit(exitcode)
 
@@ -78,6 +130,7 @@ def LockSession(session):
 
     # If our first try failed, try the GNOME "standard" interface.
     if result[1] != 0:
+        logging.info("Attempting session lock via ConsoleKit/LoginD")
         session.Lock()
 
 
@@ -87,7 +140,7 @@ def main():
         try:
             LockSession(session)
             logging.info("Session %s should be locked now.", session.GetId())
-        except:
+        except dbus.DBusException:
             logging.exception("Error while trying to lock session.")
     else:
         logging.error("Error locking session (no active session).")
--- ovirt-guest-agent-1.0.9.orig/ovirt-guest-agent/ovirt-guest-agent.conf
+++ ovirt-guest-agent-1.0.9/ovirt-guest-agent/ovirt-guest-agent.conf
@@ -6,11 +6,14 @@
 
 heart_beat_rate = 5
 report_user_rate = 10
+report_num_cpu_rate = 60
 report_application_rate = 120
 report_disk_usage = 300
+# Generic:              ovirt-guest-agent
 # RHEL/Fedora Packages: kernel ovirt-guest-agent-common xorg-x11-drv-qxl
 # Debian Packages:      linux-image xserver-xorg-video-qxl
-applications_list = kernel ovirt-guest-agent-common xorg-x11-drv-qxl linux-image xserver-xorg-video-qxl
+# openSUSE Packages:    xf86-video-qxl kernel-desktop kernel-default kernel-trace kernel-vanilla kernel-debug kernel-ec2 kernel-xen
+applications_list = kernel ovirt-guest-agent ovirt-guest-agent-common xorg-x11-drv-qxl linux-image xserver-xorg-video-qxl xf86-video-qxl kernel-desktop kernel-default kernel-trace kernel-vanilla kernel-debug kernel-ec2 kernel-xen
 ignored_fs = rootfs tmpfs autofs cgroup selinuxfs udev mqueue nfsd proc sysfs devtmpfs hugetlbfs rpc_pipefs devpts securityfs debugfs binfmt_misc fuse.gvfsd-fuse fuse.gvfs-fuse-daemon fusectl usbfs
 
 [virtio]
--- ovirt-guest-agent-1.0.9.orig/ovirt-guest-agent/ovirt-guest-agent.ini
+++ ovirt-guest-agent-1.0.9/ovirt-guest-agent/ovirt-guest-agent.ini
@@ -6,6 +6,7 @@
 
 heart_beat_rate = 5
 report_user_rate = 10
+report_num_cpu_rate = 60
 report_application_rate = 120
 report_disk_usage = 300
 
--- /dev/null
+++ ovirt-guest-agent-1.0.9/ovirt-guest-agent/ovirt-guest-agent.ini.orig
@@ -0,0 +1,51 @@
+#
+# rhev-agent.ini - RHEV-agent/Windows configuration file
+#
+
+[general]
+
+heart_beat_rate = 5
+report_user_rate = 10
+report_application_rate = 120
+report_disk_usage = 300
+
+[virtio]
+
+device = \\.\Global\com.redhat.rhevm.vdsm
+
+[loggers]
+keys=root
+
+[handlers]
+keys=console,logfile
+
+[formatters]
+keys=long,simple,none,sysform
+
+[logger_root]
+level=INFO
+handlers=logfile
+propagate=0
+
+[handler_logfile]
+class=handlers.RotatingFileHandler 
+args=('rhev-agent.log', 'a', 100*1024, 5)
+formatter=long
+
+[handler_console]
+class: StreamHandler
+args: []
+formatter: none
+
+[formatter_simple]
+format: %(name)s:%(levelname)s:  %(message)s
+
+[formatter_none]
+format: %(message)s
+
+[formatter_long]
+format: %(threadName)s::%(levelname)s::%(asctime)s::%(module)s::%(lineno)d::%(name)s::%(message)s
+
+[formatter_sysform]
+format= %(asctime)s %(levelname)s %(message)s
+datefmt=
--- ovirt-guest-agent-1.0.9.orig/ovirt-guest-agent/GuestAgentLinux2.py
+++ ovirt-guest-agent-1.0.9/ovirt-guest-agent/GuestAgentLinux2.py
@@ -183,6 +183,9 @@ class CommandHandlerLinux:
         logging.debug("Executing hibernate command: %s", cmd)
         subprocess.call(cmd)
 
+    def set_number_of_cpus(self, count):
+        pass  # currently noop
+
 
 class LinuxDataRetriver(DataRetriverBase):
 
@@ -296,6 +299,8 @@ class LinuxDataRetriver(DataRetriverBase
         self.memStats['mem_total'] = fields['MemTotal:']
         self.memStats['mem_unused'] = fields['MemFree:']
         self.memStats['mem_free'] = free
+        self.memStats['mem_buffers'] = fields['Buffers:']
+        self.memStats['mem_cached'] = fields['Cached:']
         swap_used = fields['SwapTotal:'] - fields['SwapFree:']
         self.memStats['swap_usage'] = swap_used
         self.memStats['swap_total'] = fields['SwapTotal:']
--- ovirt-guest-agent-1.0.9.orig/ovirt-guest-agent/GuestAgentWin32.py
+++ ovirt-guest-agent-1.0.9/ovirt-guest-agent/GuestAgentWin32.py
@@ -47,6 +47,13 @@ def QueryStringValue(hkey, name):
     return key_value.value
 
 
+def GetActiveSessionId():
+    for session in win32ts.WTSEnumerateSessions():
+        if session['State'] == win32ts.WTSActive:
+            return session['SessionId']
+    return win32ts.WTSGetActiveConsoleSessionId()
+
+
 def GetNetworkInterfaces():
     interfaces = list()
     try:
@@ -192,7 +199,7 @@ class CommandHandlerWin:
             logging.exception("Error occurred during user login.")
 
     def logoff(self):
-        sessionId = win32ts.WTSGetActiveConsoleSessionId()
+        sessionId = GetActiveSessionId()
         if sessionId != 0xffffffff:
             logging.debug("Logging off current user (session %d)", sessionId)
             win32ts.WTSLogoffSession(win32ts.WTS_CURRENT_SERVER_HANDLE,
@@ -257,7 +264,7 @@ class CommandHandlerWin:
     def LockWorkStation(self):
         try:
             logging.debug("LockWorkStation was called.")
-            sessionId = win32ts.WTSGetActiveConsoleSessionId()
+            sessionId = GetActiveSessionId()
             if sessionId != 0xffffffff:
                 logging.debug("Locking workstation (session %d)", sessionId)
                 dupToken = None
@@ -293,6 +300,9 @@ class CommandHandlerWin:
         except:
             logging.exception("LockWorkStation exception")
 
+    def setNumberOfCPUs(self, count):
+        pass
+
 
 class WinDataRetriver(DataRetriverBase):
     def __init__(self):
@@ -360,7 +370,7 @@ class WinDataRetriver(DataRetriverBase):
         user = "None"
         try:
             domain = ""
-            sessionId = win32ts.WTSGetActiveConsoleSessionId()
+            sessionId = GetActiveSessionId()
             if sessionId != 0xffffffff:
                 user = win32ts.WTSQuerySessionInformation(
                     win32ts.WTS_CURRENT_SERVER_HANDLE,
@@ -446,6 +456,8 @@ class WinDataRetriver(DataRetriverBase):
         self.memStats['mem_free'] = \
             str(int((pi.PhysicalAvailable * pi.PageSize) / 1024))
         self.memStats['mem_unused'] = self.memStats['mem_free']
+        self.memStats['mem_cached'] = 0   # TODO: Can this be reported?
+        self.memStats['mem_buffers'] = 0  # TODO: Can this be reported?
         try:
             strComputer = "."
             objWMIService = \
--- ovirt-guest-agent-1.0.9.orig/ovirt-guest-agent/ovirt-guest-agent.service
+++ ovirt-guest-agent-1.0.9/ovirt-guest-agent/ovirt-guest-agent.service
@@ -7,6 +7,7 @@ PIDFile=/run/ovirt-guest-agent.pid
 EnvironmentFile=-/etc/sysconfig/ovirt-guest-agent
 User=ovirtagent
 PermissionsStartOnly=true
+ExecStartPre=/sbin/modprobe virtio_console
 ExecStartPre=/bin/touch /run/ovirt-guest-agent.pid
 ExecStartPre=/bin/chown ovirtagent:ovirtagent /run/ovirt-guest-agent.pid
 ExecStart=/usr/bin/python /usr/share/ovirt-guest-agent/ovirt-guest-agent.py
--- /dev/null
+++ ovirt-guest-agent-1.0.9/ovirt-guest-agent/ovirt-guest-agent.sles
@@ -0,0 +1,115 @@
+#!/bin/sh
+#
+#     SUSE system startup script for the ovirt-guest-agent daemon
+#     Copyright (C) 1995--2005  Kurt Garloff, SUSE / Novell Inc.
+#     Copyright (C) 2014 Vinzenz Feenstra, Red Hat Inc.
+#
+#     This library is free software; you can redistribute it and/or modify it
+#     under the terms of the GNU Lesser General Public License as published by
+#     the Free Software Foundation; either version 2.1 of the License, or (at
+#     your option) any later version.
+#
+#     This library is distributed in the hope that it will be useful, but
+#     WITHOUT ANY WARRANTY; without even the implied warranty of
+#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+#     Lesser General Public License for more details.
+#
+#     You should have received a copy of the GNU Lesser General Public
+#     License along with this library; if not, write to the Free Software
+#     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
+#     USA.
+#
+# /etc/init.d/ovirt-guest-agent
+#   and its symbolic link
+# /(usr/)sbin/rcovirt-guest-agent
+#
+### BEGIN INIT INFO
+# Provides:          ovirt-guest-agent
+# Required-Start:
+# Should-Start:
+# Required-Stop:
+# Should-Stop:
+# Default-Start:     3 5
+# Default-Stop:      0 1 2 6
+# Short-Description: ovirt-guest-agent
+# Description:       Start ovirt-guest-agent
+### END INIT INFO
+
+
+# Check for missing binaries (stale symlinks should not happen)
+# Note: Special treatment of stop for LSB conformance
+ovirt_guest_agent_BIN=/usr/share/ovirt-guest-agent/ovirt-guest-agent.py
+test -x $ovirt_guest_agent_BIN || { echo "$ovirt_guest_agent_BIN not installed";
+    if [ "$1" = "stop" ]; then exit 0;
+    else exit 5; fi; }
+
+. /etc/rc.status
+
+# Reset status of this service
+rc_reset
+
+pidfile=/var/run/ovirt-guest-agent.pid
+
+case "$1" in
+    start)
+        echo -n "Starting ovirt-guest-agent "
+        if [ ! -d /dev/virtio-ports ]; then
+            modprobe virtio_console > /dev/null 2>&1
+            for retries in `seq 5`; do
+                sleep 1
+                [ -d /dev/virtio-ports ] && break
+            done
+            [ -f /sbin/udevadm ] && /sbin/udevadm trigger
+        fi
+        if [ ! -f ${pidfile} ]; then
+            /bin/touch ${pidfile}
+            /bin/chown ovirtagent:ovirtagent ${pidfile}
+        fi
+
+        /sbin/startproc -u ovirtagent -g ovirtagent $ovirt_guest_agent_BIN
+        rc_status -v
+    ;;
+    stop)
+        echo -n "Shutting down ovirt-guest-agent "
+        /sbin/killproc -TERM $ovirt_guest_agent_BIN
+        rc_status -v
+        ;;
+    try-restart)
+        $0 status
+        if test $? = 0; then
+            $0 restart
+        else
+            rc_reset
+        fi
+        rc_status
+    ;;
+    restart)
+        $0 stop
+        $0 start
+        rc_status
+    ;;
+    force-reload)
+        echo -n "Reload service ovirt-guest-agent "
+        /sbin/killproc -HUP $ovirt_guest_agent_BIN
+        rc_status -v
+    ;;
+    reload)
+        echo -n "Reload service ovirt-guest-agent "
+        /sbin/killproc -HUP $ovirt_guest_agent_BIN
+        rc_status -v
+    ;;
+    status)
+        echo -n "Checking for service ovirt-guest-agent "
+        /sbin/checkproc $ovirt_guest_agent_BIN
+        rc_status -v
+    ;;
+    probe)
+        test /etc/ovirt-guest-agent.conf -nt /var/run/ovirt-guest-agent.pid && echo reload
+    ;;
+    *)
+        echo "Usage: $0 {start|stop|status|try-restart|restart|force-reload|reload|probe}"
+        exit 1
+    ;;
+esac
+
+rc_exit
--- ovirt-guest-agent-1.0.9.orig/ovirt-guest-agent/Makefile.am
+++ ovirt-guest-agent-1.0.9/ovirt-guest-agent/Makefile.am
@@ -51,6 +51,7 @@ EXTRA_DIST= \
     $(AGENT_NAME).rules \
     ovirt-guest-agent.in \
     ovirt-guest-agent.service \
+    ovirt-guest-agent.sles \
     ovirt-guest-agent.el5.rules \
     Makefile.el5 \
     README-windows.txt \
--- ovirt-guest-agent-1.0.9.orig/ovirt-guest-agent/consoleapps/Makefile.am
+++ ovirt-guest-agent-1.0.9/ovirt-guest-agent/consoleapps/Makefile.am
@@ -1,11 +1,18 @@
 
+if INSTALL_USERMODE_SCRIPTS
 consoleappsdir = $(sysconfdir)/security/console.apps
-consoleapps_DATA = \
-    ovirt-shutdown \
-    ovirt-locksession \
-    ovirt-hibernate
+consoleapps_DATA =      \
+    ovirt-shutdown      \
+    ovirt-locksession   \
+    ovirt-hibernate     \
+    $(NULL)
+endif
 
-EXTRA_DIST = $(consoleapps_DATA)
+EXTRA_DIST =            \
+    ovirt-shutdown      \
+    ovirt-locksession   \
+    ovirt-hibernate     \
+    $(NULL)
 
 CLEANFILES = \
     *~
--- ovirt-guest-agent-1.0.9.orig/ovirt-guest-agent/pam/Makefile.am
+++ ovirt-guest-agent-1.0.9/ovirt-guest-agent/pam/Makefile.am
@@ -1,11 +1,17 @@
-
+if INSTALL_USERMODE_SCRIPTS
 pamdir = $(PAM_PREFIX)/pam.d
-pam_DATA = \
-    ovirt-shutdown \
-    ovirt-locksession \
-    ovirt-hibernate
+pam_DATA =             \
+    ovirt-shutdown     \
+    ovirt-locksession  \
+    ovirt-hibernate    \
+    $(NULL)
+endif
 
-EXTRA_DIST = $(pam_DATA)
+EXTRA_DIST =           \
+    ovirt-shutdown     \
+    ovirt-locksession  \
+    ovirt-hibernate    \
+    $(NULL)
 
 CLEANFILES = \
     *~
